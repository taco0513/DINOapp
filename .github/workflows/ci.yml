name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Quality Gate 1: Code Quality & Security
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run TypeScript check
        run: npm run type-check
        continue-on-error: false

      - name: Security audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Run security scan (Snyk)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Quality Gate 2: Testing
  test:
    name: Testing Suite
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Coverage threshold check
        run: |
          COVERAGE=$(npm run test:coverage:check 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            echo "❌ Coverage below 50%: $COVERAGE%"
            exit 1
          fi
          echo "✅ Coverage meets threshold: $COVERAGE%"

  # Quality Gate 3: E2E Testing
  e2e-test:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/e2e_test_db

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/e2e_test_db
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Start application
        run: |
          npm start &
          sleep 30 # Wait for app to start
          curl -f http://localhost:3000/api/health || exit 1
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/e2e_test_db
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
          PORT: 3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  # Quality Gate 4: Performance Testing  
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run performance benchmarks
        run: |
          npm run perf:benchmark
          npm run perf:lighthouse

      - name: Performance regression check
        run: |
          # Compare with baseline performance metrics
          node scripts/performance/check-regression.js

  # Quality Gate 5: Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Run build verification
        run: |
          # Verify build artifacts
          ls -la .next/
          # Check for critical files
          test -f .next/BUILD_ID
          test -d .next/static
          echo "✅ Build verification passed"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dinoapp/main
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # Deployment readiness check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [e2e-test, performance-test, build]
    if: always()
    
    steps:
      - name: Check deployment readiness
        run: |
          echo "🔍 Checking deployment readiness..."
          
          # Check if all required jobs passed
          QUALITY_STATUS="${{ needs.quality-check.result }}"
          TEST_STATUS="${{ needs.test.result }}"
          E2E_STATUS="${{ needs.e2e-test.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          
          echo "Quality Check: $QUALITY_STATUS"
          echo "Tests: $TEST_STATUS"
          echo "E2E Tests: $E2E_STATUS"
          echo "Build: $BUILD_STATUS"
          
          if [[ "$QUALITY_STATUS" == "success" && "$TEST_STATUS" == "success" && "$E2E_STATUS" == "success" && "$BUILD_STATUS" == "success" ]]; then
            echo "✅ All quality gates passed - Ready for deployment"
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Quality gates failed - Not ready for deployment"
            echo "ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment artifact
        if: success()
        run: |
          mkdir -p deployment-artifacts
          echo '{
            "version": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "timestamp": "${{ github.event.head_commit.timestamp }}",
            "image": "${{ needs.build.outputs.image-tag }}",
            "digest": "${{ needs.build.outputs.image-digest }}",
            "ready": true
          }' > deployment-artifacts/deployment-info.json

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: deployment-artifacts
          path: deployment-artifacts/
name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    environment: staging
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifacts
        uses: actions/download-artifact@v3
        with:
          name: deployment-artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workspace_run.id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build
        env:
          NODE_ENV: staging
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL }}

      - name: Deploy to Vercel Staging
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod --env NODE_ENV=staging'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run staging smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Test health endpoint
          curl -f ${{ steps.deploy.outputs.preview-url }}/api/health || exit 1
          
          # Test authentication endpoints
          curl -f ${{ steps.deploy.outputs.preview-url }}/api/auth/session || exit 1
          
          echo "✅ Staging smoke tests passed"

      - name: Run staging E2E tests
        run: |
          npm run test:e2e:staging
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.deploy.outputs.preview-url }}
          
      - name: Update staging deployment status
        run: |
          echo "✅ Staging deployment successful"
          echo "🌐 Staging URL: ${{ steps.deploy.outputs.preview-url }}"
          
          # Update deployment status in GitHub
          gh api repos/${{ github.repository }}/deployments \
            --method POST \
            --field ref=${{ github.sha }} \
            --field environment=staging \
            --field description="Staging deployment successful"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: success()
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run pre-production checks
        run: |
          echo "🔍 Running pre-production checks..."
          
          # Check staging deployment health
          curl -f ${{ needs.deploy-staging.outputs.deployment-url }}/api/health || exit 1
          
          # Verify database migrations are ready
          npx prisma migrate status
          
          # Check for any security vulnerabilities
          npm audit --audit-level high
          
          echo "✅ Pre-production checks passed"

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.PRODUCTION_NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.PRODUCTION_NEXTAUTH_URL }}

      - name: Run database migrations
        run: |
          echo "🔄 Running database migrations..."
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Deploy to Production
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run production smoke tests
        run: |
          echo "🧪 Running production smoke tests..."
          
          # Wait for deployment to be ready
          sleep 60
          
          # Test critical endpoints
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1
          curl -f ${{ steps.deploy.outputs.url }}/api/auth/session || exit 1
          curl -f ${{ steps.deploy.outputs.url }} || exit 1
          
          echo "✅ Production smoke tests passed"

      - name: Update production deployment status
        run: |
          echo "🚀 Production deployment successful!"
          echo "🌐 Production URL: ${{ steps.deploy.outputs.url }}"
          
          # Create GitHub deployment status
          gh api repos/${{ github.repository }}/deployments \
            --method POST \
            --field ref=${{ github.sha }} \
            --field environment=production \
            --field description="Production deployment successful"
            
          # Create release tag
          gh release create "v$(date +%Y.%m.%d-%H%M)" \
            --title "Release $(date +%Y.%m.%d-%H%M)" \
            --notes "Automated production deployment"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
      - name: Setup monitoring alerts
        run: |
          echo "📊 Setting up post-deployment monitoring..."
          
          # Send notification to monitoring system
          curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment_completed",
              "environment": "production",
              "version": "${{ github.sha }}",
              "url": "${{ needs.deploy-production.outputs.url }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }' || true

      - name: Run performance baseline tests
        run: |
          echo "⚡ Running performance baseline tests..."
          
          # Use Lighthouse CI for performance monitoring
          npm install -g @lhci/cli
          
          lhci autorun --upload.target=temporary-public-storage \
            --collect.url="${{ needs.deploy-production.outputs.url }}" \
            --collect.numberOfRuns=3 \
            || echo "⚠️ Performance tests completed with warnings"

      - name: Schedule monitoring tasks
        run: |
          echo "🔔 Scheduling monitoring tasks..."
          
          # Create monitoring schedule for next 24 hours
          curl -X POST "${{ secrets.MONITORING_API_URL }}/schedules" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "post_deployment_monitoring",
              "environment": "production",
              "duration": "24h",
              "checks": [
                "health_check",
                "performance_check", 
                "error_rate_monitoring",
                "user_experience_monitoring"
              ]
            }' || echo "⚠️ Could not schedule monitoring tasks"

  # Rollback capability (manual trigger)
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure()
    environment: production-rollback
    
    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Get previous successful deployment
        id: previous
        run: |
          # Get the last successful production deployment
          PREVIOUS_SHA=$(gh api repos/${{ github.repository }}/deployments \
            --jq '.[] | select(.environment == "production" and .statuses_url) | .sha' \
            | head -2 | tail -1)
          echo "previous-sha=$PREVIOUS_SHA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rollback to previous version
        if: steps.previous.outputs.previous-sha
        run: |
          echo "🔄 Rolling back to previous version: ${{ steps.previous.outputs.previous-sha }}"
          
          # Checkout previous version
          git checkout ${{ steps.previous.outputs.previous-sha }}
          
          # Deploy previous version
          npm ci
          npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.PRODUCTION_NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.PRODUCTION_NEXTAUTH_URL }}

      - name: Deploy rollback version
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Verify rollback
        run: |
          echo "🧪 Verifying rollback deployment..."
          
          # Wait for rollback deployment
          sleep 60
          
          # Test critical endpoints
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
          
          echo "✅ Rollback successful"
          
          # Notify team about rollback
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚨 Emergency rollback completed for ${{ github.repository }}",
              "attachments": [{
                "color": "warning",
                "fields": [
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "Rolled back to", "value": "${{ steps.previous.outputs.previous-sha }}", "short": true},
                  {"title": "Triggered by", "value": "${{ github.actor }}", "short": true}
                ]
              }]
            }' || true

  # Deployment notifications
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deployment-monitoring]
    if: always()
    
    steps:
      - name: Send deployment summary
        run: |
          # Determine overall status
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            STATUS="⚠️ STAGING ONLY"
            COLOR="warning"  
          else
            STATUS="❌ FAILED"
            COLOR="danger"
          fi
          
          # Send Slack notification
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚀 Deployment Summary for ${{ github.repository }}",
              "attachments": [{
                "color": "'$COLOR'",
                "fields": [
                  {"title": "Status", "value": "'$STATUS'", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Actor", "value": "${{ github.actor }}", "short": true},
                  {"title": "Staging", "value": "${{ needs.deploy-staging.result }}", "short": true},
                  {"title": "Production", "value": "${{ needs.deploy-production.result }}", "short": true}
                ]
              }]
            }' || echo "Failed to send Slack notification"

      - name: Update deployment dashboard
        run: |
          # Update internal deployment dashboard
          curl -X POST "${{ secrets.DEPLOYMENT_DASHBOARD_URL }}/api/deployments" \
            -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "repository": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "actor": "${{ github.actor }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "stages": {
                "staging": "${{ needs.deploy-staging.result }}",
                "production": "${{ needs.deploy-production.result }}",
                "monitoring": "${{ needs.post-deployment-monitoring.result }}"
              }
            }' || echo "Failed to update deployment dashboard"
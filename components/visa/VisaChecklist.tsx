'use client';

import { useState } from 'react';
import {
  CheckCircle2,
  Circle,
  Clock,
  AlertTriangle,
  X,
  Download,
  Share2,
} from 'lucide-react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  VISA_DATABASE,
  VisaRequirement,
  type PassportCountry,
} from '@/lib/visa-database';
import { getCountryFlag, generateVisaChecklist } from '@/lib/visa-utils';

interface VisaChecklistProps {
  countryCode: string;
  passportCountry: PassportCountry;
  onClose: () => void;
}

interface ChecklistItem {
  task: string;
  completed: boolean;
  urgent: boolean;
  notes?: string;
}

export function VisaChecklist({
  countryCode,
  passportCountry,
  onClose,
}: VisaChecklistProps) {
  const country = VISA_DATABASE[countryCode];
  const requirement = country?.requirements[passportCountry] || {
    visaRequired: true,
    visaType: 'embassy' as const,
    processingTime: '7-14 days',
    fee: 'Contact embassy',
    maxStay: '30 days',
    notes: 'Contact embassy for accurate information',
  };

  const [checklist, setChecklist] = useState<ChecklistItem[]>(() =>
    generateVisaChecklist(
      requirement.visaType,
      country?.requiredDocuments || [],
      requirement.maxStay,
      requirement.fee
    )
  );

  const [notes, setNotes] = useState<Record<number, string>>({});

  const toggleItem = (index: number) => {
    setChecklist(prev =>
      prev.map((item, i) =>
        i === index ? { ...item, completed: !item.completed } : item
      )
    );
  };

  const completedItems = checklist.filter(item => item.completed).length;
  const totalItems = checklist.length;
  const progressPercentage =
    totalItems > 0 ? (completedItems / totalItems) * 100 : 0;

  const urgentItems = checklist.filter(item => item.urgent && !item.completed);
  const daysUntilTravel = 30; // This would be calculated from actual travel date

  const getTimelineRecommendation = () => {
    const processingDays = parseInt(
      requirement.processingTime.match(/\d+/)?.[0] || '7'
    );

    if (requirement.visaType === 'visa-free') {
      return {
        status: 'ready',
        message: 'You can travel anytime! No visa required.',
        color: 'text-green-600',
      };
    } else if (requirement.visaType === 'visa-on-arrival') {
      return {
        status: 'ready',
        message: 'Prepare documents and cash for arrival.',
        color: 'text-blue-600',
      };
    } else if (daysUntilTravel > processingDays * 2) {
      return {
        status: 'good',
        message: 'You have plenty of time to complete your visa application.',
        color: 'text-green-600',
      };
    } else if (daysUntilTravel > processingDays) {
      return {
        status: 'tight',
        message: 'Start your visa application process soon.',
        color: 'text-yellow-600',
      };
    } else {
      return {
        status: 'urgent',
        message: 'You may need to expedite your visa application.',
        color: 'text-red-600',
      };
    }
  };

  const timeline = getTimelineRecommendation();

  const exportChecklist = () => {
    const checklistText = checklist
      .map(
        (item, index) =>
          `${item.completed ? '✅' : '☐'} ${item.task}${item.urgent ? ' (URGENT)' : ''}`
      )
      .join('\n');

    const fullText = `Visa Checklist for ${country?.name || countryCode}
Passport: ${getCountryFlag(passportCountry)} ${passportCountry}
Progress: ${completedItems}/${totalItems} completed

${checklistText}

Generated by DINO Visa Information System`;

    const blob = new Blob([fullText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `visa-checklist-${countryCode.toLowerCase()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50'>
      <Card className='w-full max-w-4xl max-h-[90vh] overflow-y-auto'>
        <CardHeader>
          <div className='flex items-start justify-between'>
            <div className='flex items-center gap-3'>
              <span className='text-4xl'>{getCountryFlag(countryCode)}</span>
              <div>
                <CardTitle className='text-2xl'>
                  Visa Checklist for {country?.name || countryCode}
                </CardTitle>
                <CardDescription>
                  {getCountryFlag(passportCountry)} {passportCountry} passport
                  holders
                </CardDescription>
              </div>
            </div>
            <Button variant='ghost' onClick={onClose}>
              <X className='h-4 w-4' />
            </Button>
          </div>
        </CardHeader>

        <CardContent className='space-y-6'>
          {/* Progress Overview */}
          <div className='space-y-4'>
            <div className='flex items-center justify-between'>
              <h3 className='text-lg font-semibold'>Progress Overview</h3>
              <div className='flex gap-2'>
                <Button variant='outline' size='sm' onClick={exportChecklist}>
                  <Download className='h-4 w-4 mr-2' />
                  Export
                </Button>
                <Button variant='outline' size='sm'>
                  <Share2 className='h-4 w-4 mr-2' />
                  Share
                </Button>
              </div>
            </div>

            <div className='space-y-2'>
              <div className='flex justify-between text-sm'>
                <span>
                  Completed: {completedItems} of {totalItems} tasks
                </span>
                <span>{Math.round(progressPercentage)}%</span>
              </div>
              <Progress value={progressPercentage} className='h-2' />
            </div>

            <div
              className={`p-3 rounded-lg border-l-4 ${
                timeline.status === 'ready' || timeline.status === 'good'
                  ? 'border-green-500 bg-green-50'
                  : timeline.status === 'tight'
                    ? 'border-yellow-500 bg-yellow-50'
                    : 'border-red-500 bg-red-50'
              }`}
            >
              <div className='flex items-center gap-2'>
                {timeline.status === 'urgent' ? (
                  <AlertTriangle className='h-4 w-4 text-red-600' />
                ) : (
                  <Clock className='h-4 w-4 text-gray-600' />
                )}
                <span className={`font-medium ${timeline.color}`}>
                  {timeline.message}
                </span>
              </div>
            </div>
          </div>

          {/* Visa Information Summary */}
          <Card>
            <CardHeader>
              <CardTitle className='text-lg'>
                Visa Information Summary
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className='grid grid-cols-2 md:grid-cols-4 gap-4'>
                <div>
                  <div className='text-sm text-gray-500'>Requirement</div>
                  <Badge
                    className={
                      !requirement.visaRequired
                        ? 'bg-green-100 text-green-800'
                        : requirement.visaType === 'visa-on-arrival'
                          ? 'bg-yellow-100 text-yellow-800'
                          : requirement.visaType === 'evisa'
                            ? 'bg-blue-100 text-blue-800'
                            : 'bg-red-100 text-red-800'
                    }
                  >
                    {!requirement.visaRequired
                      ? 'Visa Free'
                      : requirement.visaType === 'visa-on-arrival'
                        ? 'Visa on Arrival'
                        : requirement.visaType === 'evisa'
                          ? 'eVisa'
                          : 'Embassy Required'}
                  </Badge>
                </div>
                <div>
                  <div className='text-sm text-gray-500'>Max Stay</div>
                  <div className='font-medium'>{requirement.maxStay}</div>
                </div>
                <div>
                  <div className='text-sm text-gray-500'>Processing Time</div>
                  <div className='font-medium'>
                    {requirement.processingTime}
                  </div>
                </div>
                <div>
                  <div className='text-sm text-gray-500'>Fee</div>
                  <div className='font-medium'>{requirement.fee}</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Urgent Tasks */}
          {urgentItems.length > 0 && (
            <Card className='border-red-200'>
              <CardHeader>
                <CardTitle className='text-lg text-red-700 flex items-center gap-2'>
                  <AlertTriangle className='h-5 w-5' />
                  Urgent Tasks ({urgentItems.length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className='space-y-3'>
                  {urgentItems.map((item, index) => {
                    const originalIndex = checklist.findIndex(
                      checklistItem => checklistItem === item
                    );
                    return (
                      <div
                        key={originalIndex}
                        className='flex items-start gap-3 p-3 bg-red-50 rounded-lg'
                      >
                        <button
                          onClick={() => toggleItem(originalIndex)}
                          className='mt-0.5'
                        >
                          <Circle className='h-5 w-5 text-red-600' />
                        </button>
                        <div className='flex-1'>
                          <div className='font-medium text-red-800'>
                            {item.task}
                          </div>
                        </div>
                        <Badge variant='destructive' size='sm'>
                          Urgent
                        </Badge>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Full Checklist */}
          <Card>
            <CardHeader>
              <CardTitle className='text-lg'>Complete Checklist</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-3'>
                {checklist.map((item, index) => (
                  <div
                    key={index}
                    className={`flex items-start gap-3 p-3 rounded-lg border ${
                      item.completed
                        ? 'bg-green-50 border-green-200'
                        : 'bg-gray-50 border-gray-200'
                    }`}
                  >
                    <button
                      onClick={() => toggleItem(index)}
                      className='mt-0.5'
                    >
                      {item.completed ? (
                        <CheckCircle2 className='h-5 w-5 text-green-600' />
                      ) : (
                        <Circle className='h-5 w-5 text-gray-400' />
                      )}
                    </button>
                    <div className='flex-1'>
                      <div
                        className={`font-medium ${
                          item.completed
                            ? 'text-green-800 line-through'
                            : 'text-gray-900'
                        }`}
                      >
                        {item.task}
                      </div>
                      {notes[index] && (
                        <div className='text-sm text-gray-600 mt-1'>
                          Note: {notes[index]}
                        </div>
                      )}
                    </div>
                    <div className='flex items-center gap-2'>
                      {item.urgent && !item.completed && (
                        <Badge variant='destructive' size='sm'>
                          Urgent
                        </Badge>
                      )}
                      {item.completed && (
                        <Badge
                          variant='outline'
                          size='sm'
                          className='text-green-600 border-green-600'
                        >
                          Done
                        </Badge>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className='flex justify-between pt-4 border-t'>
            <Button variant='outline' onClick={onClose}>
              Close Checklist
            </Button>
            <div className='flex gap-2'>
              <Button
                variant='outline'
                onClick={() => {
                  // Reset all items to unchecked
                  setChecklist(prev =>
                    prev.map(item => ({ ...item, completed: false }))
                  );
                }}
              >
                Reset All
              </Button>
              <Button
                onClick={() => {
                  // Mark all as completed
                  setChecklist(prev =>
                    prev.map(item => ({ ...item, completed: true }))
                  );
                }}
              >
                Mark All Done
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
